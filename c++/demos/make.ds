# Specify DS Algorithm: You can test Quantropi's GHPPK and NIST PQC Standard ML-DSA
# The available algorithm list:
#    ghppk (Premium version), mldsa (Base version)
# ALG name option is just a suffix of the library path in the package

ALG ?= mldsa

# BigNum Library Option
# BN: qtp or gmp
BN ?= qtp

include make.auto_platform

ROOT_DIR ?=../..
PQRND_DIR ?= $(ROOT_DIR)/libqeep
MASQ_DS_DIR ?= $(ROOT_DIR)/libmasq/lib_$(ALG)


#To use provided random generator, this needs to be 0
USE_PQRND ?= 1

#To use ML-DSA Default random generator, this needs to be 1
USE_MLDSA_RANDOM ?= 0

ifeq ($(ALG),mldsa)
USE_PQRND = 0
endif

ifeq ($(ALG), ghppk)
# When use GHPPK,  BigNum Library and QEEP PQRND libraries are required

ifeq ($(USE_PQRND),1)
DEFINITIONS += $(DEF_FLAG)USE_PQRND
PQRND_LIB = $(PQRND_DIR)/${LIB_PREFIX}qeep-${LIBNAME_SUFFIX}.${LIB_EXT}
endif

BN_LIB = $(MASQ_DS_DIR)/${LIB_PREFIX}masq_bn_util_$(BN)-$(LIBNAME_SUFFIX).$(LIB_EXT) 
ifeq ($(BN),gmp)
BN_LIB += $(MASQ_DS_DIR)/${LIB_PREFIX}gmp-$(LIBNAME_SUFFIX).$(LIB_EXT) 
endif

else 	######### ALG != GHPPK ###########
ifeq ($(USE_MLDSA_RANDOM), 1)
DEFINITIONS += $(DEF_FLAG)USE_MLDSA_RANDOM
ifeq ($(PLATFORM_AUTODETECT),win)
LDFLAGS += Advapi32.lib
endif
endif

endif

# To pass DS algorithm definition in masq_ds.h, needs to define which algorithm APIs to be called
DEFINITIONS += $(DEF_FLAG)MASQ_DS_$(ALG)

MASQ_DS_LIB = $(MASQ_DS_DIR)/${LIB_PREFIX}masq_ds_$(ALG)-$(LIBNAME_SUFFIX).$(LIB_EXT) $(PQRND_LIB) $(BN_LIB)

INCLUDES = $(INCLUDE_FLAG)$(PQRND_DIR) $(INCLUDE_FLAG)$(MASQ_DS_DIR)

%.$(OBJ_EXT): ./src/%.cpp 
	$(CPP) $(CPPFLAGS) $(DEFINITIONS) $(INCLUDES) $(OBJ_FLAG)$@ $<

all: demo_masq_ds

demo_masq_ds:  demo_masq_ds.$(OBJ_EXT) 
	$(LD) $(EXEOUT_FLAG)$@$(EXE_EXT) $(LINK_GROUP_BEGIN) $^ $(MASQ_DS_LIB) $(LINK_GROUP_END) $(LDFLAGS)  
	./$@$(EXE_EXT) 

clean:
	rm -f *.$(OBJ_EXT) demo_masq_ds
	