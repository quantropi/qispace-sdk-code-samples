# Specify KEM Algorithm: You can test Quantropi's HPPK and NIST PQC Standard ML-KEM 
# The available algorithm list:
#    hppk(Premium version), mlkem (Base version)
# ALG name option is just a suffix of the library path in the package

ALG ?= mlkem

# BigNum Library Option
# BN: qtp or gmp
BN ?= qtp

include make.auto_platform

ROOT_DIR ?=../..
PQRND_DIR ?= $(ROOT_DIR)/libqeep
MASQ_KEM_DIR ?= $(ROOT_DIR)/libmasq/lib_$(ALG)

#To use provided random generator, this needs to be 0
USE_PQRND ?= 1

#To use ML-KEM Default random generator, this needs to be 1
USE_MLKEM_RANDOM ?= 0

ifeq ($(ALG),mlkem)
USE_MLKEM_RANDOM = 1
USE_PQRND = 0
endif

ifeq ($(ALG), hppk)
# When use HPPK, BigNum Library and QEEP PQRND libraries are required

ifeq ($(USE_PQRND),1)
DEFINITIONS += $(DEF_FLAG)USE_PQRND
PQRND_LIB = $(PQRND_DIR)/${LIB_PREFIX}qeep-${LIBNAME_SUFFIX}.${LIB_EXT}
endif

BN_LIB = $(MASQ_KEM_DIR)/${LIB_PREFIX}masq_bn_util_$(BN)-$(LIBNAME_SUFFIX).$(LIB_EXT) 
ifeq ($(BN),gmp)
BN_LIB += $(MASQ_KEM_DIR)/${LIB_PREFIX}gmp-$(LIBNAME_SUFFIX).$(LIB_EXT) 
endif

else 	# mlkem

ifeq ($(USE_MLKEM_RANDOM), 1)
DEFINITIONS += $(DEF_FLAG)USE_MLKEM_RANDOM
ifeq ($(PLATFORM_AUTODETECT),win)
LDFLAGS += Advapi32.lib
endif
endif

endif

# To pass KEM algorithm definition in masq_kem.h, needs to define which algorithm APIs to be called
DEFINITIONS += $(DEF_FLAG)MASQ_KEM_$(ALG)

MASQ_KEM_LIB = $(MASQ_KEM_DIR)/${LIB_PREFIX}masq_kem_$(ALG)-${LIBNAME_SUFFIX}.${LIB_EXT} \
			$(BN_LIB) $(PQRND_LIB) 

INCLUDES = $(INCLUDE_FLAG)$(PQRND_DIR) $(INCLUDE_FLAG)$(MASQ_KEM_DIR)

%.$(OBJ_EXT): ./src/%.c 
	$(CC) $(CC_FLAG) $(CFLAGS) $(DEFINITIONS) $(INCLUDES) $(OBJ_FLAG)$@ $<

all: demo_masq_kem

demo_masq_kem: demo_masq_kem.$(OBJ_EXT)
	$(LD) $(EXEOUT_FLAG)$@$(EXE_EXT) $(LINK_GROUP_BEGIN) $^ $(MASQ_KEM_LIB) $(LINK_GROUP_END) $(LDFLAGS) 
	./$@$(EXE_EXT) 

clean:
	rm -f *.$(OBJ_EXT) demo_masq_kem
    